{"version":3,"file":"static/js/497.7dd6cea2.chunk.js","mappings":"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","sources":["pages/payout/RequestPayoutView.js"],"sourcesContent":["import { Button, CircularProgress, Grid, Stack, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport { Form, Field } from \"react-final-form\";\nimport { useTranslation } from \"react-i18next\";\nimport DrawerComponent from \"../../components/Drawer\";\nimport { NumbericInputCustom, SelectCustom, TextFieldCustom } from \"../../components/FormElements\";\nimport { portal_config } from \"../../portal.config\";\nimport { cache } from \"../../utils/cache\";\nimport { getCurrencySymbol } from \"../../utils/common\";\nimport { formatAmount } from \"../../utils/util\";\nimport validators from \"../../utils/validators\";\nimport { dataUtil } from \"../../wsclient/crmservices/dataUtil\";\n\nexport default function RequestPayoutView(props) {\n    const { t } = useTranslation();\n    const { paymentMethods, type, paymentMethodTypes, wallet, showLoadWallet } = props;\n    const currency_code = cache.getCurrencyCode();\n    let _types = [];\n    let _paymentMethods = [];\n\n    if (paymentMethodTypes && paymentMethodTypes.length > 1) {\n        paymentMethodTypes.forEach(item => {\n            if (item == 'CARD') {\n                _types.push({\n                    label: t('card'),\n                    value: 'CARD',\n                })\n            }\n            if (item == 'ACCOUNT_DEBIT') {\n                _types.push({\n                    label: t('account_debit'),\n                    value: 'ACCOUNT_DEBIT',\n                })\n            }\n            if (item == 'WALLET') {\n                _types.push({\n                    label: t('wallet'),\n                    value: 'WALLET',\n                })\n            }\n        });\n    }\n    if (paymentMethods) {\n        if (type == 'CARD' && paymentMethods.cards) {\n            let _cards = [];\n            paymentMethods.cards.forEach(item => {\n                let label = null;\n                if (item.card && item.card.last4) {\n                    label = '****' + item.card.last4\n                }\n                if (label) _cards.push({ ...item, label: label });\n            });\n            _paymentMethods = _cards;\n        }\n        if (type == 'WALLET' && paymentMethods.wallets) {\n            let _wallets = [];\n            paymentMethods.wallets.forEach(item => {\n                let label = null;\n                if (item.wallet && item.wallet.email) {\n                    label = item.wallet.email\n                } else if (item.wallet && item.wallet.phone && item.wallet.phone.number) {\n                    label = item.wallet.phone.number\n                }\n                if (label) _wallets.push({ ...item, label: label });\n            });\n            _paymentMethods = _wallets;\n        }\n        if (type == 'ACCOUNT_DEBIT' && paymentMethods.accountDebits) {\n            let _accountDebits = [];\n            paymentMethods.accountDebits.forEach(item => {\n                let accountLabel = item.account_debit && item.account_debit.account_name ? item.account_debit.account_name : null;\n                if (item.account_debit) {\n                    if (currency_code == 'EUR') {\n                        if (item.account_debit.iban) {\n                            let first4 = item.account_debit.iban.substr(0, 4);\n                            let last4 = item.account_debit.iban.substr(item.account_debit.iban.length - 4, item.account_debit.iban.length);\n                            accountLabel = first4 + \" **** **** **** **** \" + last4;\n                        }\n                    }\n                    if (currency_code == 'GBP') {\n                        accountLabel = item.account_debit.account_number ? item.account_debit.account_number : ''\n                    }\n                    if (currency_code == 'USD') {\n                        accountLabel = item.account_debit.account_number ? item.account_debit.account_number : ''\n                    }\n                }\n                if (accountLabel) _accountDebits.push({ ...item, label: accountLabel });\n            });\n            _paymentMethods = _accountDebits;\n        }\n    }\n    let currency = cache.getCurrency();\n    const crmBalance = wallet ? dataUtil.getBalanceByType(wallet.balances) : null;\n    const currencyCRM = crmBalance ? (crmBalance.currency_code ? getCurrencySymbol(crmBalance.currency_code) : currency) : null;\n    const businessBalance = wallet ? dataUtil.getBalanceByType(wallet.balances, true) : null;\n    const currencyBusiness = businessBalance ? (businessBalance.currency_code ? getCurrencySymbol(businessBalance.currency_code) : currency) : null;\n    console.log(\"AAAA RequestPayoutView props: \", props)\n\n    return (\n        <>\n            <DrawerComponent isOpen={props.isOpen} onClose={props.onClose} title={t('request_payout')} message={props.message} showProcessing={props.showProcessing}>\n                <Grid item xs={12}>\n                    <center>\n                        {showLoadWallet ? <CircularProgress /> : <>\n                            <Stack direction={'row'} alignItems='center' spacing={1}>\n                                <Stack flex={1}>\n                                    <Typography variant=\"h3\">{currencyBusiness}{businessBalance && businessBalance.open ? formatAmount(businessBalance.open, portal_config.isFormatDecimalBalance) : '0.00'}</Typography>\n                                    <Typography variant=\"subtitle2\">{t('any_where')}</Typography>\n                                </Stack>\n                                <Stack flex={1}>\n                                    <Typography variant=\"h3\">{currencyCRM}{crmBalance && crmBalance.total ? formatAmount(crmBalance.total, portal_config.isFormatDecimalBalance) : '0.00'}</Typography>\n                                    <Typography variant=\"subtitle2\">{t('CRM.COM')}</Typography>\n                                </Stack>\n                            </Stack>\n                        </>}\n                    </center>\n                    <Form\n                        onSubmit={props.onSubmit}\n                        render={({ handleSubmit }) => (\n                            <Grid item xs={12}>\n                                {_types && _types.length > 1 && <Grid item xs={12} marginY={2}>\n                                    <Field\n                                        name=\"type\"\n                                        component={SelectCustom}\n                                        isEdit={true}\n                                        isValid={true}\n                                        selectData={_types}\n                                        placeholder={' '}\n                                        label={t('select_your_payment_method_type')}\n                                        onSelectedChange={(e) => props.onHandleChange('type', e.target.value)}\n                                    />\n                                </Grid>}\n                                <Grid item xs={12} marginY={2}>\n                                    <Field\n                                        name=\"payment_method\"\n                                        component={SelectCustom}\n                                        placeholder={' '}\n                                        label={t('select_your_payment_method')}\n                                        isEdit={true}\n                                        isValid={true}\n                                        selectData={_paymentMethods}\n                                        keyName='id'\n                                        keyLabel={'label'}\n                                        onSelectedChange={(e) => props.onHandleChange('payment_method', e.target.value)}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} marginY={2}>\n                                    <Field\n                                        name=\"amount\"\n                                        label={t('request_payout_amount')}\n                                        component={NumbericInputCustom}\n                                        isEdit={true}\n                                        isValid={true}\n                                        validate={validators.composeValidators(validators.required)}\n                                        formatType=\"currency\"\n                                    />\n                                </Grid>\n                                <Grid item xs={12} marginY={3}>\n                                    <Button id='requestPayout/btnSubmit' size=\"large\" fullWidth variant='contained' onClick={handleSubmit} type='submit'>{t('btn_submit')}</Button>\n                                </Grid>\n                            </Grid>\n                        )}\n                    />\n                </Grid>\n            </DrawerComponent>\n        </>\n    )\n}"],"names":["RequestPayoutView","props","t","useTranslation","paymentMethods","type","paymentMethodTypes","wallet","showLoadWallet","currency_code","cache","getCurrencyCode","_types","_paymentMethods","length","forEach","item","push","label","value","cards","_cards","card","last4","_objectSpread","wallets","_wallets","email","phone","number","accountDebits","_accountDebits","accountLabel","account_debit","account_name","iban","substr","account_number","currency","getCurrency","crmBalance","dataUtil","getBalanceByType","balances","currencyCRM","getCurrencySymbol","businessBalance","currencyBusiness","console","log","_jsx","_Fragment","children","DrawerComponent","isOpen","onClose","title","message","showProcessing","_jsxs","Grid","xs","CircularProgress","Stack","direction","alignItems","spacing","flex","Typography","variant","open","formatAmount","portal_config","isFormatDecimalBalance","total","Form","onSubmit","render","_ref","handleSubmit","marginY","Field","name","component","SelectCustom","isEdit","isValid","selectData","placeholder","onSelectedChange","e","onHandleChange","target","keyName","keyLabel","NumbericInputCustom","validate","validators","composeValidators","required","formatType","Button","id","size","fullWidth","onClick"],"sourceRoot":""}