{"version":3,"file":"static/js/982.576e8c67.chunk.js","mappings":"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","sources":["pages/payout/RequestPayoutController.js","pages/payout/RequestPayoutView.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport RequestPayoutView from \"./RequestPayoutView\";\nimport crmservices from '../../wsclient'\nimport { useTranslation } from \"react-i18next\";\nimport { cache } from \"../../utils/cache\";\n\nexport default function RequestPayoutController(props) {\n    const { t } = useTranslation();\n\n    const [showProcessing, setShowProcessing] = useState(false);\n    const [message, setMessage] = useState(null);\n    const [paymentMethodTypes, setPaymentMethodTypes] = useState([]);\n    const [type, setType] = useState(null);\n    const [paymentMethods, setPaymentMethods] = useState({});\n    const [paymentMethod, setPaymentMethod] = useState(null);\n    const [showLoadWallet, setShowLoadWallet] = useState(false);\n    const [wallet, setWallet] = useState(null);\n\n    var appConfig = cache.getAppConfig();\n    const integrations = cache.getIntegrations();\n\n    useEffect(() => {\n        getPaymentMethods();\n        onLoadWallet();\n    }, [])\n\n    const getPaymentMethods = async () => {\n        try {\n            let result = await crmservices.payment.getListPaymentMethods({\n                support_payouts: true,\n            })\n            console.log(\"AAAA getPaymentMethods result: \", result);\n            if (result.code == \"OK\") {\n                if (result.data && result.data.content) groupPayouts(result.data.content);\n            }\n        } catch (error) {\n            console.log(\"AAAA getPaymentMethods error: \", error)\n        }\n    }\n\n    const onLoadWallet = async () => {\n        setShowLoadWallet(true);\n        try {\n            let walletId = cache.getWalletId();\n            var result = await crmservices.wallet.getWallet(walletId);\n            if (result.code === 'OK') {\n                setWallet(result.data);\n                cache.setWalletId(result.data.id);\n            }\n        } catch (error) {\n            console.log(\"onLoadWallet error:\", error);\n        }\n        setShowLoadWallet(false);\n    }\n\n    const groupPayouts = (data) => {\n        let _multiplePaymentMethodTypes = false;\n        let _paymentMethodTypes = [];\n        let _accountDebit = [];\n        let _cards = [];\n        let _wallets = [];\n        let _paymentMethod = null;\n\n        if (data && data.length > 0) {\n            if (data.length == 1) _paymentMethod = data[0];\n            data.forEach(item => {\n                if (item.payment_method_type == 'CARD') {\n                    _cards.push(item)\n                }\n                if (item.payment_method_type == 'ACCOUNT_DEBIT') {\n                    _accountDebit.push(item)\n                }\n                if (item.payment_method_type == 'WALLET') {\n                    _wallets.push(item)\n                }\n                if (item.payment_method_type && !_paymentMethodTypes.includes(item.payment_method_type)) {\n                    _paymentMethodTypes.push(item.payment_method_type)\n                }\n            });\n        }\n        if (_paymentMethodTypes && _paymentMethodTypes.length > 0) {\n            if (_paymentMethodTypes.length > 1) _multiplePaymentMethodTypes = true;\n            else {\n                _multiplePaymentMethodTypes = false;\n                setType(_paymentMethodTypes[0]);\n            }\n        }\n        let _groupInfo = {\n            multiplePaymentMethodTypes: _multiplePaymentMethodTypes,\n            paymentMethodTypes: _paymentMethodTypes,\n            cards: _cards,\n            accountDebits: _accountDebit,\n            wallets: _wallets,\n            paymentMethod: _paymentMethod,\n        }\n        console.log(\"AAAA _groupInfo: \", _groupInfo)\n        setPaymentMethods({\n            cards: _cards,\n            accountDebits: _accountDebit,\n            wallets: _wallets,\n        })\n        setPaymentMethodTypes(_paymentMethodTypes);\n        if (_paymentMethod) setPaymentMethod(_paymentMethod)\n        return _groupInfo\n    }\n\n    const onSubmit = async (values) => {\n        setShowProcessing(true)\n        console.log(\"AAAA onSubmit values: \", values)\n        try {\n            let body = {\n                amount: values.amount\n            }\n            if (paymentMethod && type) {\n                body.payment_method = {\n                    type: type,\n                    id: paymentMethod,\n                }\n            }\n            let result = await crmservices.payouts.createPayout(body);\n            console.log(\"AAAA onSubmit result: \", result);\n            if (result.code == 'OK') {\n                await onRefresh();\n                showMessage({ status: true, message: t('REQUEST_PAYOUT_SUCCESS') })\n            } else {\n                showMessage({ status: true, message: t('REQUEST_PAYOUT_FAILED') })\n            }\n        } catch (error) {\n            console.log(\"AAAA onSubmit error: \", error)\n            showMessage({ status: true, message: t('EXCEPTION_PROCESS') })\n        }\n        setShowProcessing(false)\n    }\n\n    const onHandleChange = (target, value) => {\n        if (target == 'type') {\n            setType(value);\n        }\n        if (target == 'payment_method') {\n            setPaymentMethod(value);\n        }\n    }\n\n    const showMessage = ({ status, title, message, otherMessage, callBackFn }) => {\n        setShowProcessing(false);\n        setMessage({ show: status, title: title, content: message, otherMessage, callBackFn: callBackFn ? callBackFn : () => setMessage({}) });\n    }\n\n    const onRefresh = async () => {\n        getPaymentMethods();\n        onLoadWallet();\n    }\n\n    return (\n        <>\n            <RequestPayoutView\n                isOpen={props.isOpen}\n                showProcessing={showProcessing}\n                message={message}\n                paymentMethodTypes={paymentMethodTypes}\n                type={type}\n                paymentMethods={paymentMethods}\n                paymentMethod={paymentMethod}\n                wallet={wallet}\n                showLoadWallet={showLoadWallet}\n                onClose={props.onClose}\n                setPaymentMethod={setPaymentMethod}\n                setType={setType}\n                onSubmit={onSubmit}\n                onHandleChange={onHandleChange}\n            />\n        </>\n    )\n}","import { Button, CircularProgress, Grid, Stack, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport { Form, Field } from \"react-final-form\";\nimport { useTranslation } from \"react-i18next\";\nimport DrawerComponent from \"../../components/Drawer\";\nimport { NumbericInputCustom, SelectCustom, TextFieldCustom } from \"../../components/FormElements\";\nimport { portal_config } from \"../../portal.config\";\nimport { cache } from \"../../utils/cache\";\nimport { getCurrencySymbol } from \"../../utils/common\";\nimport { formatAmount } from \"../../utils/util\";\nimport validators from \"../../utils/validators\";\nimport { dataUtil } from \"../../wsclient/crmservices/dataUtil\";\n\nexport default function RequestPayoutView(props) {\n    const { t } = useTranslation();\n    const { paymentMethods, type, paymentMethodTypes, wallet, showLoadWallet } = props;\n    const currency_code = cache.getCurrencyCode();\n    let _types = [];\n    let _paymentMethods = [];\n\n    if (paymentMethodTypes && paymentMethodTypes.length > 1) {\n        paymentMethodTypes.forEach(item => {\n            if (item == 'CARD') {\n                _types.push({\n                    label: t('card'),\n                    value: 'CARD',\n                })\n            }\n            if (item == 'ACCOUNT_DEBIT') {\n                _types.push({\n                    label: t('account_debit'),\n                    value: 'ACCOUNT_DEBIT',\n                })\n            }\n            if (item == 'WALLET') {\n                _types.push({\n                    label: t('wallet'),\n                    value: 'WALLET',\n                })\n            }\n        });\n    }\n    if (paymentMethods) {\n        if (type == 'CARD' && paymentMethods.cards) {\n            let _cards = [];\n            paymentMethods.cards.forEach(item => {\n                let label = null;\n                if (item.card && item.card.last4) {\n                    label = '****' + item.card.last4\n                }\n                if (label) _cards.push({ ...item, label: label });\n            });\n            _paymentMethods = _cards;\n        }\n        if (type == 'WALLET' && paymentMethods.wallets) {\n            let _wallets = [];\n            paymentMethods.wallets.forEach(item => {\n                let label = null;\n                if (item.wallet && item.wallet.email) {\n                    label = item.wallet.email\n                } else if (item.wallet && item.wallet.phone && item.wallet.phone.number) {\n                    label = item.wallet.phone.number\n                }\n                if (label) _wallets.push({ ...item, label: label });\n            });\n            _paymentMethods = _wallets;\n        }\n        if (type == 'ACCOUNT_DEBIT' && paymentMethods.accountDebits) {\n            let _accountDebits = [];\n            paymentMethods.accountDebits.forEach(item => {\n                let accountLabel = item.account_debit && item.account_debit.account_name ? item.account_debit.account_name : null;\n                if (item.account_debit) {\n                    if (currency_code == 'EUR') {\n                        if (item.account_debit.iban) {\n                            let first4 = item.account_debit.iban.substr(0, 4);\n                            let last4 = item.account_debit.iban.substr(item.account_debit.iban.length - 4, item.account_debit.iban.length);\n                            accountLabel = first4 + \" **** **** **** **** \" + last4;\n                        }\n                    }\n                    if (currency_code == 'GBP') {\n                        accountLabel = item.account_debit.account_number ? item.account_debit.account_number : ''\n                    }\n                    if (currency_code == 'USD') {\n                        accountLabel = item.account_debit.account_number ? item.account_debit.account_number : ''\n                    }\n                }\n                if (accountLabel) _accountDebits.push({ ...item, label: accountLabel });\n            });\n            _paymentMethods = _accountDebits;\n        }\n    }\n    let currency = cache.getCurrency();\n    const crmBalance = wallet ? dataUtil.getBalanceByType(wallet.balances) : null;\n    const currencyCRM = crmBalance ? (crmBalance.currency_code ? getCurrencySymbol(crmBalance.currency_code) : currency) : null;\n    const businessBalance = wallet ? dataUtil.getBalanceByType(wallet.balances, true) : null;\n    const currencyBusiness = businessBalance ? (businessBalance.currency_code ? getCurrencySymbol(businessBalance.currency_code) : currency) : null;\n    console.log(\"AAAA RequestPayoutView props: \", props)\n\n    return (\n        <>\n            <DrawerComponent isOpen={props.isOpen} onClose={props.onClose} title={t('request_payout')} message={props.message} showProcessing={props.showProcessing}>\n                <Grid item xs={12}>\n                    <center>\n                        {showLoadWallet ? <CircularProgress /> : <>\n                            <Stack direction={'row'} alignItems='center' spacing={1}>\n                                <Stack flex={1}>\n                                    <Typography variant=\"h3\">{currencyBusiness}{businessBalance && businessBalance.open ? formatAmount(businessBalance.open, portal_config.isFormatDecimalBalance) : '0.00'}</Typography>\n                                    <Typography variant=\"subtitle2\">{t('any_where')}</Typography>\n                                </Stack>\n                                <Stack flex={1}>\n                                    <Typography variant=\"h3\">{currencyCRM}{crmBalance && crmBalance.total ? formatAmount(crmBalance.total, portal_config.isFormatDecimalBalance) : '0.00'}</Typography>\n                                    <Typography variant=\"subtitle2\">{t('CRM.COM')}</Typography>\n                                </Stack>\n                            </Stack>\n                        </>}\n                    </center>\n                    <Form\n                        onSubmit={props.onSubmit}\n                        render={({ handleSubmit }) => (\n                            <Grid item xs={12}>\n                                {_types && _types.length > 1 && <Grid item xs={12} marginY={2}>\n                                    <Field\n                                        name=\"type\"\n                                        component={SelectCustom}\n                                        isEdit={true}\n                                        isValid={true}\n                                        selectData={_types}\n                                        placeholder={' '}\n                                        label={t('select_your_payment_method_type')}\n                                        onSelectedChange={(e) => props.onHandleChange('type', e.target.value)}\n                                    />\n                                </Grid>}\n                                <Grid item xs={12} marginY={2}>\n                                    <Field\n                                        name=\"payment_method\"\n                                        component={SelectCustom}\n                                        placeholder={' '}\n                                        label={t('select_your_payment_method')}\n                                        isEdit={true}\n                                        isValid={true}\n                                        selectData={_paymentMethods}\n                                        keyName='id'\n                                        keyLabel={'label'}\n                                        onSelectedChange={(e) => props.onHandleChange('payment_method', e.target.value)}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} marginY={2}>\n                                    <Field\n                                        name=\"amount\"\n                                        label={t('request_payout_amount')}\n                                        component={NumbericInputCustom}\n                                        isEdit={true}\n                                        isValid={true}\n                                        validate={validators.composeValidators(validators.required)}\n                                        formatType=\"currency\"\n                                    />\n                                </Grid>\n                                <Grid item xs={12} marginY={3}>\n                                    <Button id='requestPayout/btnSubmit' size=\"large\" fullWidth variant='contained' onClick={handleSubmit} type='submit'>{t('btn_submit')}</Button>\n                                </Grid>\n                            </Grid>\n                        )}\n                    />\n                </Grid>\n            </DrawerComponent>\n        </>\n    )\n}"],"names":["RequestPayoutController","props","t","useTranslation","_useState","useState","_useState2","_slicedToArray","showProcessing","setShowProcessing","_useState3","_useState4","message","setMessage","_useState5","_useState6","paymentMethodTypes","setPaymentMethodTypes","_useState7","_useState8","type","setType","_useState9","_useState10","paymentMethods","setPaymentMethods","_useState11","_useState12","paymentMethod","setPaymentMethod","_useState13","_useState14","showLoadWallet","setShowLoadWallet","_useState15","_useState16","wallet","setWallet","cache","getAppConfig","getIntegrations","useEffect","getPaymentMethods","onLoadWallet","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","result","wrap","_context","prev","next","crmservices","payment","getListPaymentMethods","support_payouts","sent","console","log","code","data","content","groupPayouts","t0","stop","apply","arguments","_ref2","_callee2","walletId","_context2","getWalletId","getWallet","setWalletId","id","_multiplePaymentMethodTypes","_paymentMethodTypes","_accountDebit","_cards","_wallets","_paymentMethod","length","forEach","item","payment_method_type","push","includes","_groupInfo","multiplePaymentMethodTypes","cards","accountDebits","wallets","onSubmit","_ref3","_callee3","values","body","_context3","amount","payment_method","payouts","createPayout","onRefresh","showMessage","status","_x","_ref4","title","otherMessage","callBackFn","show","_ref5","_callee4","_context4","_jsx","_Fragment","children","RequestPayoutView","isOpen","onClose","onHandleChange","target","value","currency_code","getCurrencyCode","_types","_paymentMethods","label","card","last4","_objectSpread","email","phone","number","_accountDebits","accountLabel","account_debit","account_name","iban","substr","account_number","currency","getCurrency","crmBalance","dataUtil","getBalanceByType","balances","currencyCRM","getCurrencySymbol","businessBalance","currencyBusiness","DrawerComponent","_jsxs","Grid","xs","CircularProgress","Stack","direction","alignItems","spacing","flex","Typography","variant","open","formatAmount","portal_config","isFormatDecimalBalance","total","Form","render","handleSubmit","marginY","Field","name","component","SelectCustom","isEdit","isValid","selectData","placeholder","onSelectedChange","e","keyName","keyLabel","NumbericInputCustom","validate","validators","composeValidators","required","formatType","Button","size","fullWidth","onClick"],"sourceRoot":""}