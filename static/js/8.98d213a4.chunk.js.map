{"version":3,"file":"static/js/8.98d213a4.chunk.js","mappings":"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","sources":["custom_src/pages/landing-page/LandingPageView.js","pages/landing-page/LandingPageController.js","pages/landing-page/LandingPageView.js"],"sourcesContent":["import { Grid, Typography } from \"@mui/material\";\nimport React from \"react\";\n\nexport default function LandingPageView(props){\n\n    return(\n        <Grid item x={12}>\n            <Typography>LandingPageView</Typography>\n        </Grid>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom'\nimport { portal_config } from '../../portal.config';\nimport { config_path } from '../../router/config.path';\nimport LandingPageView from './LandingPageView'\nimport { getLanguage, storeLanguageAsync } from '../../utils/common';\nimport { cache } from '../../utils/cache';\nimport { custom_page } from '../../custom.config';\n\nconst LandingPage = custom_page.lading_page && custom_page.lading_page.view ? require('../../custom_src/pages/landing-page/LandingPageView').default : LandingPageView;\n\nexport default function LandingPageController(props) {\n    const navigate = useNavigate();\n    const { t } = useTranslation();\n\n    const [confirm, setConfirm] = useState({});\n    const [showRegisterAction,setShowRegisterAction] = useState(false);\n    const [currentLanguage, setLanguage] = useState(getLanguage());\n    const [defaultLanguage, setDefaultLanguage] = useState(null);\n    const languages = cache.getLanguages();\n\n    useEffect(() => {\n        if (currentLanguage) {\n            console.log('languages:',languages);\n            let exLanguage = languages.filter(x => x.value == currentLanguage);\n            console.log(\"exLanguage:\",exLanguage);\n            if (exLanguage && exLanguage.length > 0){\n                setDefaultLanguage(exLanguage[0]);\n            } \n        }\n    }, [])\n\n    const onRegister = () => {\n        if(!portal_config.isDisableRegisterExisingCustomer) {\n            setConfirm({\n                show: true,\n                message: t('exits_rewards_participant'),\n                actionTitle: t('btn_register_have_card'),\n                closeTitle: t('btn_register_new'),\n                onAction: () => {\n                    navigate(config_path.register_existing_customer);\n                },\n                onClose: () => {\n                    navigate(config_path.register)\n                },\n            })\n        } else {\n            navigate(config_path.register);\n        }\n    }\n\n    const onChangeLanguage = async (item) => {\n        let _language = languages.filter(x => x.value == item.value);\n        if(_language && _language.length > 0){\n            setLanguage(_language[0].value);\n            storeLanguageAsync(item.value);\n            setDefaultLanguage(_language[0]);\n        }\n    }\n\n\n    return (\n        <LandingPage \n            confirm={confirm}\n            showRegisterAction={showRegisterAction}\n            languages={languages}\n            defaultLanguage={defaultLanguage}\n            setShowRegisterAction={setShowRegisterAction}\n            onChangeLanguage={onChangeLanguage}\n        />\n    )\n}\n","import React, { useState } from 'react'\nimport { Box, Button, Grid, MenuItem, Popover, Stack, Typography } from '@mui/material'\nimport { cache } from '../../utils/cache'\nimport { useTranslation } from 'react-i18next'\nimport { useNavigate } from 'react-router-dom'\nimport { config_path, portalCfg } from '../../router/config.path'\nimport PublicPage from '../PublicPage'\nimport Modal from '../../components/Modal';\nexport default function LandingPageView(props) {\n    const appConfig = cache.getAppConfig();\n    const { t } = useTranslation();\n    const navigate = useNavigate();\n\n    const {defaultLanguage, languages} = props;\n    const [anchorElLanguage, setAnchorElLanguage] = useState(null);\n\n    const handleOpenLanguages = (event) => {\n        setAnchorElLanguage(event.currentTarget);\n    };\n\n    const onChangeLanguage = async (item) => {\n        setAnchorElLanguage(null);\n        props.onChangeLanguage(item);\n    }\n\n    console.log(\"props.showRegisterAction:\",props.showRegisterAction);\n    return (\n        <PublicPage confirm={props.confirm}>\n            <Grid item xs={12} marginTop={2}>\n                <Typography variant='h5' textAlign={'center'} my={6}>{t('landing_welcome')} {appConfig.name}</Typography>\n            </Grid>\n            <Grid item xs={12}>\n                <Grid item xs={12} marginTop={10}>\n                    <Button size='large' id='landingPage/btnLogin' fullWidth variant='contained' onClick={() => navigate(config_path.login)}>{t('btn_login')}</Button>\n                </Grid>\n                <Grid item xs={12} marginTop={2}>\n                    <Button size='large' id='landingPage/btnRegister' fullWidth variant='outlined' onClick={() => props.setShowRegisterAction(true)}>{t('btn_register')}</Button>\n                </Grid>\n                {/* <Grid item xs={12} container justifyContent={'center'} marginTop={7}>\n                    <Typography variant='subtitle1'>{'Â© CRM.COM'}</Typography>\n                </Grid> */}\n            </Grid>\n            <Grid item xs={12} container sx={{\n                position: 'absolute',\n                bottom: 8,\n                width: 'calc(100% - 48px)',\n                justifyContent: 'center',\n                alignItems: 'center'\n            }} >\n                <Button onClick={(e) => handleOpenLanguages(e)} size='large' id='header/changeLanguage'>\n                    {defaultLanguage ? defaultLanguage.label : \"\"}\n                </Button>\n                <Grid xs={12} item container justifyContent={'center'}>\n                    <Typography variant='subtitle1'>{'Â© CRM.COM'}</Typography>\n                </Grid>\n            </Grid>\n\n            <Popover id='list-languages'\n                anchorEl={anchorElLanguage}\n                open={Boolean(anchorElLanguage)}\n                onClose={() => setAnchorElLanguage(null)}\n                sx={{\n                    top: 45,\n                }}\n            >\n                {languages && languages.length > 0 && languages.map((item, index) => {\n                    return (\n                        <MenuItem key={index} onClick={() => onChangeLanguage(item)}>\n                            <Typography variant='subtitle2'>{item.label}</Typography>\n                        </MenuItem>\n                    )\n                })}\n            </Popover>\n            {props.showRegisterAction && <Modal\n                isOpen={props.showRegisterAction}\n                onClose={() => props.setShowRegisterAction(false)}\n            >\n                <Box>\n                    <Stack direction={'row'}>\n                        <Typography>{t('exits_rewards_participant')}</Typography>\n                    </Stack>\n                    <Stack marginTop={4} direction={'row'} justifyContent={'center'} alignItems={'center'}>\n                        <Stack flex={1} justifyContent={'center'} alignItems={'center'} spacing={2}>\n                            <img src={portalCfg.publicPath + '/assets/images/register_have_card.png'} alt={'Logo Image'} height={100} />\n                            <Button id='landingPage/btnRegisterHaveCard' onClick={() => navigate(config_path.register_existing_customer)} variant='contained'>{t('btn_register_have_card')}</Button>\n                        </Stack>\n                        <Stack flex={1} justifyContent={'center'} alignItems={'center'} spacing={2}>\n                            <img src={portalCfg.publicPath + '/assets/images/register_new.png'} alt={'Logo Image'} height={100} />\n                            <Button id='landingPage/btnRegisterNew' onClick={() => navigate(config_path.register)}  variant='contained'>{t('btn_register_new')}</Button>\n                        </Stack>\n                    </Stack>\n                </Box>\n            </Modal>}\n        </PublicPage>\n    )\n}\n"],"names":["LandingPageView","props","_jsx","Grid","item","x","children","Typography","LandingPage","custom_page","lading_page","view","require","LandingPageController","useNavigate","useTranslation","t","_useState","useState","_useState2","_slicedToArray","confirm","_useState3","_useState4","showRegisterAction","setShowRegisterAction","_useState5","getLanguage","_useState6","currentLanguage","setLanguage","_useState7","_useState8","defaultLanguage","setDefaultLanguage","languages","cache","getLanguages","useEffect","console","log","exLanguage","filter","value","length","onChangeLanguage","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_language","wrap","_context","prev","next","storeLanguageAsync","stop","_x","apply","arguments","appConfig","getAppConfig","navigate","anchorElLanguage","setAnchorElLanguage","_jsxs","PublicPage","xs","marginTop","variant","textAlign","my","name","Button","size","id","fullWidth","onClick","config_path","login","container","sx","position","bottom","width","justifyContent","alignItems","e","currentTarget","label","Popover","anchorEl","open","Boolean","onClose","top","map","index","MenuItem","Modal","isOpen","Box","Stack","direction","flex","spacing","src","portalCfg","publicPath","alt","height","register_existing_customer","register"],"sourceRoot":""}